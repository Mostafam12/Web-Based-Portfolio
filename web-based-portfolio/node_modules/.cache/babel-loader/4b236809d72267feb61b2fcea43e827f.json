{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nexport function useSectionInView(refs) {\n  _s();\n\n  const [sectionInView, setSectionInView] = useState(null);\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0.5\n    };\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          setSectionInView(entry.target.id);\n        }\n      });\n    }, options);\n    refs.forEach(ref => {\n      if (ref.current) {\n        observer.observe(ref.current);\n      }\n    });\n    return () => {\n      refs.forEach(ref => {\n        if (ref.current) {\n          observer.unobserve(ref.current);\n        }\n      });\n    };\n  }, [refs]);\n  return sectionInView;\n}\n\n_s(useSectionInView, \"mPRCPWBhU4DBn5Mcsy6tvP2u+24=\");","map":{"version":3,"sources":["D:/WebBasedPortfolio/Personal-Website-main/personal-website/src/functions/useSectionInView.js"],"names":["useEffect","useState","useSectionInView","refs","sectionInView","setSectionInView","options","root","rootMargin","threshold","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","id","ref","current","observe","unobserve"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAAA;;AACrC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,IAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,OAAO,GAAG;AACdC,MAAAA,IAAI,EAAE,IADQ;AAEdC,MAAAA,UAAU,EAAE,KAFE;AAGdC,MAAAA,SAAS,EAAE;AAHG,KAAhB;AAMA,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBC,OAAO,IAAI;AACnDA,MAAAA,OAAO,CAACC,OAAR,CAAgBC,KAAK,IAAI;AACvB,YAAIA,KAAK,CAACC,cAAV,EAA0B;AACxBV,UAAAA,gBAAgB,CAACS,KAAK,CAACE,MAAN,CAAaC,EAAd,CAAhB;AACD;AACF,OAJD;AAKD,KANgB,EAMdX,OANc,CAAjB;AAQAH,IAAAA,IAAI,CAACU,OAAL,CAAaK,GAAG,IAAI;AAClB,UAAIA,GAAG,CAACC,OAAR,EAAiB;AACfT,QAAAA,QAAQ,CAACU,OAAT,CAAiBF,GAAG,CAACC,OAArB;AACD;AACF,KAJD;AAMA,WAAO,MAAM;AACXhB,MAAAA,IAAI,CAACU,OAAL,CAAaK,GAAG,IAAI;AAClB,YAAIA,GAAG,CAACC,OAAR,EAAiB;AACfT,UAAAA,QAAQ,CAACW,SAAT,CAAmBH,GAAG,CAACC,OAAvB;AACD;AACF,OAJD;AAKD,KAND;AAOD,GA5BQ,EA4BN,CAAChB,IAAD,CA5BM,CAAT;AA8BA,SAAOC,aAAP;AACD;;GAlCeF,gB","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nexport function useSectionInView(refs) {\r\n  const [sectionInView, setSectionInView] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const options = {\r\n      root: null,\r\n      rootMargin: '0px',\r\n      threshold: 0.5\r\n    };\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        if (entry.isIntersecting) {\r\n          setSectionInView(entry.target.id);\r\n        }\r\n      });\r\n    }, options);\r\n\r\n    refs.forEach(ref => {\r\n      if (ref.current) {\r\n        observer.observe(ref.current);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      refs.forEach(ref => {\r\n        if (ref.current) {\r\n          observer.unobserve(ref.current);\r\n        }\r\n      });\r\n    };\r\n  }, [refs]);\r\n\r\n  return sectionInView;\r\n}"]},"metadata":{},"sourceType":"module"}